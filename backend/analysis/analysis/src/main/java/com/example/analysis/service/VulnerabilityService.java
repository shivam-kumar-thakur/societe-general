package com.example.analysis.service;

import com.example.analysis.dto.ServiceResponseDTO;
import com.example.analysis.dto.iocDto.ShortDetailsDTO;
import com.example.analysis.dto.vulnerabilityDto.RecentVulnerabilityRequestDTO;
import com.example.analysis.dto.vulnerabilityDto.ShortDetailsVulnerabilityDTO;
import com.example.analysis.entity.Ioc;
import com.example.analysis.entity.ThreatReport;
import com.example.analysis.entity.utility.EnrichedVulnerability;
import com.example.analysis.repository.ThreatRepository;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Queue;

@Service
public class VulnerabilityService {

    private final ThreatRepository threatRepository;
    private final MongoTemplate mongoTemplate;

    public VulnerabilityService(ThreatRepository threatRepository, MongoTemplate mongoTemplate) {
        this.threatRepository = threatRepository;
        this.mongoTemplate = mongoTemplate;
    }

    /**
     * Returns a short summary of a recent vulnerability using its ID (typically CVE number).
     */
    public ServiceResponseDTO getRecentVulnerabilities(RecentVulnerabilityRequestDTO recentVulnerabilityRequestDTO) {

        Query query=new Query();
        query.skip(recentVulnerabilityRequestDTO.getPageOffset()).limit(recentVulnerabilityRequestDTO.getLimit());

        List<ThreatReport> results = mongoTemplate.find(query, ThreatReport.class);

        List<ShortDetailsVulnerabilityDTO> shortDetailsDTOS = new ArrayList<>();

        for (ThreatReport th:results){
            EnrichedVulnerability enriched = th.getEnrichedVulnerability();

            ShortDetailsVulnerabilityDTO dto = new ShortDetailsVulnerabilityDTO();
            dto.setId(th.getCveNumber());
            dto.setSeverity(enriched.getSeverity());
            dto.setTitle(enriched.getTitle());
            dto.setCvssScore(String.valueOf(th.getCvssScore()));

            shortDetailsDTOS.add(dto);
        }

        return new ServiceResponseDTO(true, "Vulnerability summary fetched successfully.", HttpStatus.OK, shortDetailsDTOS);
    }

    /**
     * Returns full threat report details for a given vulnerability ID.
     */
    public ServiceResponseDTO getVulnerabilitiesDetails(String id) {
        Optional<ThreatReport> threatReportOpt = threatRepository.findById(id);

        if (!threatReportOpt.isPresent()) {
            return new ServiceResponseDTO(false, "Vulnerability details not found.", HttpStatus.NOT_FOUND, null);
        }

        ThreatReport threatReport = threatReportOpt.get();
        return new ServiceResponseDTO(true, "Full vulnerability report fetched.", HttpStatus.OK, threatReport);

    }
}
